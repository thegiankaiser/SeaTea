@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService


<div>
    <div class="row">
        <div class="col">
            <input type="text" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@FilterDataString" />
            <button @onclick="(e => EnableFilterData())" class="btn btn-success">Filter</button>
            <button @onclick="(e => ClearFilterData())" class="btn btn-danger">Clear</button>
        </div>
    </div>

</div>

<div class="container-fluid">
    @{
        var productList = ProductService.GetAllData();



        /*
        * 
        Change the grouping sort order to be
        Order by ProductType
        Then order by ProductList Alphabetic within the Product data set



        */



        // Group by the Enum
        foreach (ProductTypeEnum productType in Enum.GetValues(typeof(ProductTypeEnum)))
        {
            // Get only the products that are of this enum type
            var productListGroup = productList.Where(m => m.ProductType == productType);



            // Order the list alphabetical
            productListGroup = productListGroup.OrderBy(m => m.Title);



            // If filter is enabled, reduce the data set to the filter string
            if (FilterData)
            {
                productListGroup = productListGroup.Where(m => m.Title.Contains(FilterDataString));
            }



            if (productListGroup.Any())
            {



                <hr />
                <h2>@productType.DisplayName()</h2>



                <div class="row">
                    <div class="card-columns">
                        @foreach (var product in productListGroup)
                        {
                            <div class="card">
                                <div class="card-img" style="background-image: url('@product.Image');">
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title">@product.Title</h5>
                                </div>
                                <div class="card-footer">
                                    <small class="text-muted">
                                        <button @onclick="(e => SelectProduct(product.Id))" id="MoreInfoButton_@product.Id" data-toggle="modal" data-target="#productModal" class="btn btn-primary">More Info</button>
                                    </small>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    }
</div>



@if(selectedProduct != null)
{
  <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="card">
            <div class="card-img" style="background-image: url('@selectedProduct.Image');">
            </div>
            <div class="card-body">
                <p class="card-text">@selectedProduct.Description</p>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          @if(voteCount == 0)
          {
            <span>Be the first to vote!</span>
          }
          else
          {
            <span>@voteCount @voteLabel</span>
          }
          @for(int i=1; i<6; i++)
          {
            var currentStar = i;
            if(i<=currentRating)
            {
              <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
            }
            else
            {
              <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
            }
          }
        </div>
      </div>
    </div>
  </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code 
{
    ProductModel selectedProduct;
    string selectedProductId;

    void SelectProduct(string productId)
    {
      selectedProductId = productId;
      selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
      GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
      if(selectedProduct.Ratings == null)
      {
        currentRating = 0;
        voteCount = 0;
      }
      else
      {
        voteCount = selectedProduct.Ratings.Count();
        voteLabel = voteCount > 1 ? "Votes" : "Vote";
        currentRating = selectedProduct.Ratings.Sum() / voteCount;
      }

      System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
      System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
      ProductService.AddRating(selectedProductId, rating);
      SelectProduct(selectedProductId);
    }
    string FilterDataString = "";
    bool FilterData = false;
    
    void UpdateFilterText(string text)
    {
        FilterDataString = text;
    }
    void EnableFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = true;
    }
    void ClearFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = false;
    }
}
